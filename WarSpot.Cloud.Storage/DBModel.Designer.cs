//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Entity;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("DBModel", "AccountIntellect", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Account), "Intellect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Intellect), true)]

#endregion

namespace WarSpot.Cloud.Storage

{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class DBContext : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект DBContext, используя строку соединения из раздела "DBContext" файла конфигурации приложения.
        /// </summary>
        public DBContext() : base("name=DBContext", "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта DBContext.
        /// </summary>
        public DBContext(string connectionString) : base(connectionString, "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта DBContext.
        /// </summary>
        public DBContext(EntityConnection connection) : base(connection, "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Account> Account
        {
            get
            {
                if ((_Account == null))
                {
                    _Account = base.CreateObjectSet<Account>("Account");
                }
                return _Account;
            }
        }
        private ObjectSet<Account> _Account;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Intellect> Intellect
        {
            get
            {
                if ((_Intellect == null))
                {
                    _Intellect = base.CreateObjectSet<Intellect>("Intellect");
                }
                return _Intellect;
            }
        }
        private ObjectSet<Intellect> _Intellect;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Account. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAccount(Account account)
        {
            base.AddObject("Account", account);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Intellect. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToIntellect(Intellect intellect)
        {
            base.AddObject("Intellect", intellect);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Account.
        /// </summary>
        /// <param name="account_ID">Исходное значение свойства Account_ID.</param>
        /// <param name="account_Name">Исходное значение свойства Account_Name.</param>
        /// <param name="account_Password">Исходное значение свойства Account_Password.</param>
        public static Account CreateAccount(global::System.Guid account_ID, global::System.String account_Name, global::System.String account_Password)
        {
            Account account = new Account();
            account.Account_ID = account_ID;
            account.Account_Name = account_Name;
            account.Account_Password = account_Password;
            return account;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Account_ID
        {
            get
            {
                return _Account_ID;
            }
            set
            {
                if (_Account_ID != value)
                {
                    OnAccount_IDChanging(value);
                    ReportPropertyChanging("Account_ID");
                    _Account_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Account_ID");
                    OnAccount_IDChanged();
                }
            }
        }
        private global::System.Guid _Account_ID;
        partial void OnAccount_IDChanging(global::System.Guid value);
        partial void OnAccount_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Account_Name
        {
            get
            {
                return _Account_Name;
            }
            set
            {
                OnAccount_NameChanging(value);
                ReportPropertyChanging("Account_Name");
                _Account_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Account_Name");
                OnAccount_NameChanged();
            }
        }
        private global::System.String _Account_Name;
        partial void OnAccount_NameChanging(global::System.String value);
        partial void OnAccount_NameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Account_Password
        {
            get
            {
                return _Account_Password;
            }
            set
            {
                OnAccount_PasswordChanging(value);
                ReportPropertyChanging("Account_Password");
                _Account_Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Account_Password");
                OnAccount_PasswordChanged();
            }
        }
        private global::System.String _Account_Password;
        partial void OnAccount_PasswordChanging(global::System.String value);
        partial void OnAccount_PasswordChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountIntellect", "Intellect")]
        public EntityCollection<Intellect> Intellect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Intellect>("DBModel.AccountIntellect", "Intellect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Intellect>("DBModel.AccountIntellect", "Intellect", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Intellect")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Intellect : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Intellect.
        /// </summary>
        /// <param name="intellect_ID">Исходное значение свойства Intellect_ID.</param>
        /// <param name="intellect_Name">Исходное значение свойства Intellect_Name.</param>
        /// <param name="accountAccount_ID">Исходное значение свойства AccountAccount_ID.</param>
        /// <param name="intellect_BLOBAddress">Исходное значение свойства Intellect_BLOBAddress.</param>
        public static Intellect CreateIntellect(global::System.Guid intellect_ID, global::System.String intellect_Name, global::System.Guid accountAccount_ID, global::System.Guid intellect_BLOBAddress)
        {
            Intellect intellect = new Intellect();
            intellect.Intellect_ID = intellect_ID;
            intellect.Intellect_Name = intellect_Name;
            intellect.AccountAccount_ID = accountAccount_ID;
            intellect.Intellect_BLOBAddress = intellect_BLOBAddress;
            return intellect;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Intellect_ID
        {
            get
            {
                return _Intellect_ID;
            }
            set
            {
                if (_Intellect_ID != value)
                {
                    OnIntellect_IDChanging(value);
                    ReportPropertyChanging("Intellect_ID");
                    _Intellect_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Intellect_ID");
                    OnIntellect_IDChanged();
                }
            }
        }
        private global::System.Guid _Intellect_ID;
        partial void OnIntellect_IDChanging(global::System.Guid value);
        partial void OnIntellect_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Intellect_Name
        {
            get
            {
                return _Intellect_Name;
            }
            set
            {
                OnIntellect_NameChanging(value);
                ReportPropertyChanging("Intellect_Name");
                _Intellect_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Intellect_Name");
                OnIntellect_NameChanged();
            }
        }
        private global::System.String _Intellect_Name;
        partial void OnIntellect_NameChanging(global::System.String value);
        partial void OnIntellect_NameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AccountAccount_ID
        {
            get
            {
                return _AccountAccount_ID;
            }
            set
            {
                OnAccountAccount_IDChanging(value);
                ReportPropertyChanging("AccountAccount_ID");
                _AccountAccount_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountAccount_ID");
                OnAccountAccount_IDChanged();
            }
        }
        private global::System.Guid _AccountAccount_ID;
        partial void OnAccountAccount_IDChanging(global::System.Guid value);
        partial void OnAccountAccount_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Intellect_BLOBAddress
        {
            get
            {
                return _Intellect_BLOBAddress;
            }
            set
            {
                OnIntellect_BLOBAddressChanging(value);
                ReportPropertyChanging("Intellect_BLOBAddress");
                _Intellect_BLOBAddress = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Intellect_BLOBAddress");
                OnIntellect_BLOBAddressChanged();
            }
        }
        private global::System.Guid _Intellect_BLOBAddress;
        partial void OnIntellect_BLOBAddressChanging(global::System.Guid value);
        partial void OnIntellect_BLOBAddressChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountIntellect", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DBModel.AccountIntellect", "Account", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
