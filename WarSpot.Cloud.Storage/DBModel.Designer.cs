//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("DBModel", "AccountIntellect", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Account), "Intellect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Intellect), true)]
[assembly: EdmRelationshipAttribute("DBModel", "AccountGame", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Account), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Game), true)]
[assembly: EdmRelationshipAttribute("DBModel", "GameGameIntellect", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Game), "GameIntellect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.GameIntellect), true)]
[assembly: EdmRelationshipAttribute("DBModel", "IntellectGameIntellect", "Intellect", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Intellect), "GameIntellect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.GameIntellect), true)]

#endregion

namespace WarSpot.Cloud.Storage
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DBContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DBContext object using the connection string found in the 'DBContext' section of the application configuration file.
        /// </summary>
        public DBContext() : base("name=DBContext", "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DBContext object.
        /// </summary>
        public DBContext(string connectionString) : base(connectionString, "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DBContext object.
        /// </summary>
        public DBContext(EntityConnection connection) : base(connection, "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Account> Account
        {
            get
            {
                if ((_Account == null))
                {
                    _Account = base.CreateObjectSet<Account>("Account");
                }
                return _Account;
            }
        }
        private ObjectSet<Account> _Account;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Intellect> Intellect
        {
            get
            {
                if ((_Intellect == null))
                {
                    _Intellect = base.CreateObjectSet<Intellect>("Intellect");
                }
                return _Intellect;
            }
        }
        private ObjectSet<Intellect> _Intellect;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Game> Game
        {
            get
            {
                if ((_Game == null))
                {
                    _Game = base.CreateObjectSet<Game>("Game");
                }
                return _Game;
            }
        }
        private ObjectSet<Game> _Game;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GameIntellect> GameIntellect
        {
            get
            {
                if ((_GameIntellect == null))
                {
                    _GameIntellect = base.CreateObjectSet<GameIntellect>("GameIntellect");
                }
                return _GameIntellect;
            }
        }
        private ObjectSet<GameIntellect> _GameIntellect;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Account EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAccount(Account account)
        {
            base.AddObject("Account", account);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Intellect EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIntellect(Intellect intellect)
        {
            base.AddObject("Intellect", intellect);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Game EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGame(Game game)
        {
            base.AddObject("Game", game);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GameIntellect EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGameIntellect(GameIntellect gameIntellect)
        {
            base.AddObject("GameIntellect", gameIntellect);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Account object.
        /// </summary>
        /// <param name="account_ID">Initial value of the Account_ID property.</param>
        /// <param name="account_Name">Initial value of the Account_Name property.</param>
        /// <param name="account_Password">Initial value of the Account_Password property.</param>
        public static Account CreateAccount(global::System.Guid account_ID, global::System.String account_Name, global::System.String account_Password)
        {
            Account account = new Account();
            account.Account_ID = account_ID;
            account.Account_Name = account_Name;
            account.Account_Password = account_Password;
            return account;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Account_ID
        {
            get
            {
                return _Account_ID;
            }
            set
            {
                if (_Account_ID != value)
                {
                    OnAccount_IDChanging(value);
                    ReportPropertyChanging("Account_ID");
                    _Account_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Account_ID");
                    OnAccount_IDChanged();
                }
            }
        }
        private global::System.Guid _Account_ID;
        partial void OnAccount_IDChanging(global::System.Guid value);
        partial void OnAccount_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Account_Name
        {
            get
            {
                return _Account_Name;
            }
            set
            {
                OnAccount_NameChanging(value);
                ReportPropertyChanging("Account_Name");
                _Account_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Account_Name");
                OnAccount_NameChanged();
            }
        }
        private global::System.String _Account_Name;
        partial void OnAccount_NameChanging(global::System.String value);
        partial void OnAccount_NameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Account_Password
        {
            get
            {
                return _Account_Password;
            }
            set
            {
                OnAccount_PasswordChanging(value);
                ReportPropertyChanging("Account_Password");
                _Account_Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Account_Password");
                OnAccount_PasswordChanged();
            }
        }
        private global::System.String _Account_Password;
        partial void OnAccount_PasswordChanging(global::System.String value);
        partial void OnAccount_PasswordChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountIntellect", "Intellect")]
        public EntityCollection<Intellect> Intellect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Intellect>("DBModel.AccountIntellect", "Intellect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Intellect>("DBModel.AccountIntellect", "Intellect", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountGame", "Game")]
        public EntityCollection<Game> Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Game>("DBModel.AccountGame", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Game>("DBModel.AccountGame", "Game", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Game")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Game : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Game object.
        /// </summary>
        /// <param name="game_ID">Initial value of the Game_ID property.</param>
        /// <param name="accountAccount_ID">Initial value of the AccountAccount_ID property.</param>
        public static Game CreateGame(global::System.Guid game_ID, global::System.Guid accountAccount_ID)
        {
            Game game = new Game();
            game.Game_ID = game_ID;
            game.AccountAccount_ID = accountAccount_ID;
            return game;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Game_ID
        {
            get
            {
                return _Game_ID;
            }
            set
            {
                if (_Game_ID != value)
                {
                    OnGame_IDChanging(value);
                    ReportPropertyChanging("Game_ID");
                    _Game_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Game_ID");
                    OnGame_IDChanged();
                }
            }
        }
        private global::System.Guid _Game_ID;
        partial void OnGame_IDChanging(global::System.Guid value);
        partial void OnGame_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AccountAccount_ID
        {
            get
            {
                return _AccountAccount_ID;
            }
            set
            {
                OnAccountAccount_IDChanging(value);
                ReportPropertyChanging("AccountAccount_ID");
                _AccountAccount_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountAccount_ID");
                OnAccountAccount_IDChanged();
            }
        }
        private global::System.Guid _AccountAccount_ID;
        partial void OnAccountAccount_IDChanging(global::System.Guid value);
        partial void OnAccountAccount_IDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountGame", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountGame", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountGame", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountGame", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DBModel.AccountGame", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "GameGameIntellect", "GameIntellect")]
        public EntityCollection<GameIntellect> GameIntellect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GameIntellect>("DBModel.GameGameIntellect", "GameIntellect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GameIntellect>("DBModel.GameGameIntellect", "GameIntellect", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="GameIntellect")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GameIntellect : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GameIntellect object.
        /// </summary>
        /// <param name="gameGame_ID">Initial value of the GameGame_ID property.</param>
        /// <param name="intellectIntellect_ID">Initial value of the IntellectIntellect_ID property.</param>
        public static GameIntellect CreateGameIntellect(global::System.Guid gameGame_ID, global::System.Guid intellectIntellect_ID)
        {
            GameIntellect gameIntellect = new GameIntellect();
            gameIntellect.GameGame_ID = gameGame_ID;
            gameIntellect.IntellectIntellect_ID = intellectIntellect_ID;
            return gameIntellect;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GameGame_ID
        {
            get
            {
                return _GameGame_ID;
            }
            set
            {
                if (_GameGame_ID != value)
                {
                    OnGameGame_IDChanging(value);
                    ReportPropertyChanging("GameGame_ID");
                    _GameGame_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GameGame_ID");
                    OnGameGame_IDChanged();
                }
            }
        }
        private global::System.Guid _GameGame_ID;
        partial void OnGameGame_IDChanging(global::System.Guid value);
        partial void OnGameGame_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid IntellectIntellect_ID
        {
            get
            {
                return _IntellectIntellect_ID;
            }
            set
            {
                if (_IntellectIntellect_ID != value)
                {
                    OnIntellectIntellect_IDChanging(value);
                    ReportPropertyChanging("IntellectIntellect_ID");
                    _IntellectIntellect_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IntellectIntellect_ID");
                    OnIntellectIntellect_IDChanged();
                }
            }
        }
        private global::System.Guid _IntellectIntellect_ID;
        partial void OnIntellectIntellect_IDChanging(global::System.Guid value);
        partial void OnIntellectIntellect_IDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "GameGameIntellect", "Game")]
        public Game Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.GameGameIntellect", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.GameGameIntellect", "Game").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.GameGameIntellect", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("DBModel.GameGameIntellect", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "IntellectGameIntellect", "Intellect")]
        public Intellect Intellect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intellect>("DBModel.IntellectGameIntellect", "Intellect").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intellect>("DBModel.IntellectGameIntellect", "Intellect").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Intellect> IntellectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Intellect>("DBModel.IntellectGameIntellect", "Intellect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Intellect>("DBModel.IntellectGameIntellect", "Intellect", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Intellect")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Intellect : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Intellect object.
        /// </summary>
        /// <param name="intellect_ID">Initial value of the Intellect_ID property.</param>
        /// <param name="intellect_Name">Initial value of the Intellect_Name property.</param>
        /// <param name="accountAccount_ID">Initial value of the AccountAccount_ID property.</param>
        public static Intellect CreateIntellect(global::System.Guid intellect_ID, global::System.String intellect_Name, global::System.Guid accountAccount_ID)
        {
            Intellect intellect = new Intellect();
            intellect.Intellect_ID = intellect_ID;
            intellect.Intellect_Name = intellect_Name;
            intellect.AccountAccount_ID = accountAccount_ID;
            return intellect;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Intellect_ID
        {
            get
            {
                return _Intellect_ID;
            }
            set
            {
                if (_Intellect_ID != value)
                {
                    OnIntellect_IDChanging(value);
                    ReportPropertyChanging("Intellect_ID");
                    _Intellect_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Intellect_ID");
                    OnIntellect_IDChanged();
                }
            }
        }
        private global::System.Guid _Intellect_ID;
        partial void OnIntellect_IDChanging(global::System.Guid value);
        partial void OnIntellect_IDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Intellect_Name
        {
            get
            {
                return _Intellect_Name;
            }
            set
            {
                OnIntellect_NameChanging(value);
                ReportPropertyChanging("Intellect_Name");
                _Intellect_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Intellect_Name");
                OnIntellect_NameChanged();
            }
        }
        private global::System.String _Intellect_Name;
        partial void OnIntellect_NameChanging(global::System.String value);
        partial void OnIntellect_NameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AccountAccount_ID
        {
            get
            {
                return _AccountAccount_ID;
            }
            set
            {
                OnAccountAccount_IDChanging(value);
                ReportPropertyChanging("AccountAccount_ID");
                _AccountAccount_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountAccount_ID");
                OnAccountAccount_IDChanged();
            }
        }
        private global::System.Guid _AccountAccount_ID;
        partial void OnAccountAccount_IDChanging(global::System.Guid value);
        partial void OnAccountAccount_IDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountIntellect", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DBModel.AccountIntellect", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "IntellectGameIntellect", "GameIntellect")]
        public EntityCollection<GameIntellect> GameIntellect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GameIntellect>("DBModel.IntellectGameIntellect", "GameIntellect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GameIntellect>("DBModel.IntellectGameIntellect", "GameIntellect", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
