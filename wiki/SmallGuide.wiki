#summary Small guide for end users: writing intellect.

== Введение ==

Этот документ описывает процесс создания простого интеллекта существа для игры WarSpot.

В разделе [http://warspot.cloudapp.net/File Файлов] доступен актуальный готовый пример интеллекта, его достаточно лишь скомпилировать и загрузить на серверы WarSpot.

== Подготовка  ==

=== Установка ===
Для начала Вам надо поставить Microsoft Visual Studio 2010/2012 с пакетом разработки для .NET 4.0. 

    Вы можете использовать другие средства разработки и компиляции .NET библиотеки *на свой страх и риск*, поддержка таких способов разработки осуществляться не будет.

=== Создание проекта ===
Далее Вы можете или использовать скаченный пример, или создать проект сами, для этого:
 # Создайте в Visual Studio новый проект (.NET 4.0, Class Library)
 # Добавьте в Reference библитеку WarSpot.Contracts.Intellect, доступную в разделе [http://warspot.cloudapp.net/File Файлов]
 
=== Подготовка к отладке ===
Если Вы создаете интеллект с нуля, то для *удобства отладки* выполните следующие шаги :
 # Скачайте WarSpot.ConsoleComputer (уже включен в поставку примера интеллекта).
 # Откройте свойства проекта-библиотеки
 # В разделе Debug в пункте  Start external program укажите полный путь к WarSpot.ConsoleComputer.exe
 # В пункте Command line arguments укажите *не менее двух* библиотек интерфейсов, простейщий вариант - укажите два раза свою библиотеку
 
После выполнения всех этих действий вы легко сможете отлаживать свой класс существа, расставляя точки останова (Breakpoint) и запуская проект через Debug > Start Debugging.

== Правила == 

Полные правила доступны в разделе [Rules]. 
Вы должны предоставить скомпилированную dll - библиотеку содержащую класс существа.
Существа оказываются в некотором мире. Мир дискретный как по координатам так и по времени. Вашему существу доступны несколько действий и некоторая видимая площадь мира.

== Код и запуск == 
 # Создайте класс и унаследуйте его от интерфейса [http://code.google.com/p/warspot/source/browse/trunk/WarSpot.Contracts.Intellect/IBeingInterface.cs IBeingInterface]
 # Создайте два метода Contruct и Think с сигнатурами, соответствующими интерфейсу IBeingInterface
 # Реализуйте оба метода согласно вашим идеям, конкретные детали доступны в разделе [#Конкретная реализация]
 # При необходимости создайте дополнительные методы и поля класса
 # Скомпилируйте и запустите 
 # Проанализируйте запись матча (для этого можно использовать одно из нескольких визуальных приложений)
 # Внесите необходимые правки в алгоритм
 # Если Вы выполнили шаги из раздела [#Подготовка к отладке] или использовали пример существа, то поставьте точки останова во всех необходимых местах вашего кода.
 # Если Вы считаете, что ваще существо готово к боям, то смело загружайте его на сервер, подробнее в разделе [#Запуск матчей на сервере]
 
== Конкретная реализация == 

== Запуск матчей на сервере ==