//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace WarSpot.MetroClient.ServiceClient {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorCode", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class ErrorCode : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string MessageField;
        
        private WarSpot.MetroClient.ServiceClient.ErrorType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WarSpot.MetroClient.ServiceClient.ErrorType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorType", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public enum ErrorType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WrongLoginOrPassword = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotLoggedIn = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BadFileType = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ForbiddenUsages = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BadFileName = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DataBaseProblems = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WrongInformationInField = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UnknownException = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IllegalReference = 9,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Replay", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class Replay : object, System.ComponentModel.INotifyPropertyChanged {
        
        private WarSpot.MetroClient.ServiceClient.MatchReplay DataField;
        
        private System.Guid IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WarSpot.MetroClient.ServiceClient.MatchReplay Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MatchReplay", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class MatchReplay : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Version AssemblyVersionField;
        
        private System.Collections.ObjectModel.ObservableCollection<WarSpot.MetroClient.ServiceClient.WarSpotEvent> EventsField;
        
        private ulong StepsField;
        
        private System.Guid WinnerTeamField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Version AssemblyVersion {
            get {
                return this.AssemblyVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyVersionField, value) != true)) {
                    this.AssemblyVersionField = value;
                    this.RaisePropertyChanged("AssemblyVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<WarSpot.MetroClient.ServiceClient.WarSpotEvent> Events {
            get {
                return this.EventsField;
            }
            set {
                if ((object.ReferenceEquals(this.EventsField, value) != true)) {
                    this.EventsField = value;
                    this.RaisePropertyChanged("Events");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Steps {
            get {
                return this.StepsField;
            }
            set {
                if ((this.StepsField.Equals(value) != true)) {
                    this.StepsField = value;
                    this.RaisePropertyChanged("Steps");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid WinnerTeam {
            get {
                return this.WinnerTeamField;
            }
            set {
                if ((this.WinnerTeamField.Equals(value) != true)) {
                    this.WinnerTeamField = value;
                    this.RaisePropertyChanged("WinnerTeam");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WarSpotEvent", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.SystemEventWorldCreated))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEvent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventBirth))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventMove))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventDeath))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventHealthChange))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventCiChange))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.SystemEventMatchEnd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventWorldCiChanged))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.SystemEventTurnStarted))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.SystemEventCommandDead))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.SystemEventCommandWin))]
    public partial class WarSpotEvent : object, System.ComponentModel.INotifyPropertyChanged {
        
        private WarSpot.MetroClient.ServiceClient.EventTypes EventTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WarSpot.MetroClient.ServiceClient.EventTypes EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((this.EventTypeField.Equals(value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemEventWorldCreated", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class SystemEventWorldCreated : WarSpot.MetroClient.ServiceClient.WarSpotEvent {
        
        private int HeightField;
        
        private int WidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEvent", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventBirth))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventMove))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventDeath))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventHealthChange))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WarSpot.MetroClient.ServiceClient.GameEventCiChange))]
    public partial class GameEvent : WarSpot.MetroClient.ServiceClient.WarSpotEvent {
        
        private System.Guid SubjectIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SubjectId {
            get {
                return this.SubjectIdField;
            }
            set {
                if ((this.SubjectIdField.Equals(value) != true)) {
                    this.SubjectIdField = value;
                    this.RaisePropertyChanged("SubjectId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEventBirth", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class GameEventBirth : WarSpot.MetroClient.ServiceClient.GameEvent {
        
        private WarSpot.MetroClient.ServiceClient.BeingCharacteristics NewbornField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WarSpot.MetroClient.ServiceClient.BeingCharacteristics Newborn {
            get {
                return this.NewbornField;
            }
            set {
                if ((object.ReferenceEquals(this.NewbornField, value) != true)) {
                    this.NewbornField = value;
                    this.RaisePropertyChanged("Newborn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEventMove", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class GameEventMove : WarSpot.MetroClient.ServiceClient.GameEvent {
        
        private int ShiftXField;
        
        private int ShiftYField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ShiftX {
            get {
                return this.ShiftXField;
            }
            set {
                if ((this.ShiftXField.Equals(value) != true)) {
                    this.ShiftXField = value;
                    this.RaisePropertyChanged("ShiftX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ShiftY {
            get {
                return this.ShiftYField;
            }
            set {
                if ((this.ShiftYField.Equals(value) != true)) {
                    this.ShiftYField = value;
                    this.RaisePropertyChanged("ShiftY");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEventDeath", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class GameEventDeath : WarSpot.MetroClient.ServiceClient.GameEvent {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEventHealthChange", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class GameEventHealthChange : WarSpot.MetroClient.ServiceClient.GameEvent {
        
        private float HealthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Health {
            get {
                return this.HealthField;
            }
            set {
                if ((this.HealthField.Equals(value) != true)) {
                    this.HealthField = value;
                    this.RaisePropertyChanged("Health");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEventCiChange", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class GameEventCiChange : WarSpot.MetroClient.ServiceClient.GameEvent {
        
        private float CiField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Ci {
            get {
                return this.CiField;
            }
            set {
                if ((this.CiField.Equals(value) != true)) {
                    this.CiField = value;
                    this.RaisePropertyChanged("Ci");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemEventMatchEnd", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class SystemEventMatchEnd : WarSpot.MetroClient.ServiceClient.WarSpotEvent {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameEventWorldCiChanged", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class GameEventWorldCiChanged : WarSpot.MetroClient.ServiceClient.WarSpotEvent {
        
        private float CiField;
        
        private int XField;
        
        private int YField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Ci {
            get {
                return this.CiField;
            }
            set {
                if ((this.CiField.Equals(value) != true)) {
                    this.CiField = value;
                    this.RaisePropertyChanged("Ci");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemEventTurnStarted", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class SystemEventTurnStarted : WarSpot.MetroClient.ServiceClient.WarSpotEvent {
        
        private ulong NumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ulong Number {
            get {
                return this.NumberField;
            }
            set {
                if ((this.NumberField.Equals(value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemEventCommandDead", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class SystemEventCommandDead : WarSpot.MetroClient.ServiceClient.WarSpotEvent {
        
        private System.Guid TeamIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TeamId {
            get {
                return this.TeamIdField;
            }
            set {
                if ((this.TeamIdField.Equals(value) != true)) {
                    this.TeamIdField = value;
                    this.RaisePropertyChanged("TeamId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SystemEventCommandWin", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class SystemEventCommandWin : WarSpot.MetroClient.ServiceClient.WarSpotEvent {
        
        private System.Guid TeamIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid TeamId {
            get {
                return this.TeamIdField;
            }
            set {
                if ((this.TeamIdField.Equals(value) != true)) {
                    this.TeamIdField = value;
                    this.RaisePropertyChanged("TeamId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventTypes", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public enum EventTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameEventHealthChange = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameEventCiChange = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameEventMove = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameEventDeath = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameEventBirth = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameEventWorldCiChanged = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemEventWorldCreated = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemEventTurnStarted = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemEventCommandDead = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemEventCommandWin = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SystemEventMatchEnd = 10,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BeingCharacteristics", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Intellect")]
    public partial class BeingCharacteristics : object, System.ComponentModel.INotifyPropertyChanged {
        
        private float CiField;
        
        private float HealthField;
        
        private System.Guid IdField;
        
        private float MaxHealthField;
        
        private int MaxSeeDistanceField;
        
        private float MaxStepField;
        
        private System.Guid TeamField;
        
        private int XField;
        
        private int YField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Ci {
            get {
                return this.CiField;
            }
            set {
                if ((this.CiField.Equals(value) != true)) {
                    this.CiField = value;
                    this.RaisePropertyChanged("Ci");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Health {
            get {
                return this.HealthField;
            }
            set {
                if ((this.HealthField.Equals(value) != true)) {
                    this.HealthField = value;
                    this.RaisePropertyChanged("Health");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxHealth {
            get {
                return this.MaxHealthField;
            }
            set {
                if ((this.MaxHealthField.Equals(value) != true)) {
                    this.MaxHealthField = value;
                    this.RaisePropertyChanged("MaxHealth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxSeeDistance {
            get {
                return this.MaxSeeDistanceField;
            }
            set {
                if ((this.MaxSeeDistanceField.Equals(value) != true)) {
                    this.MaxSeeDistanceField = value;
                    this.RaisePropertyChanged("MaxSeeDistance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxStep {
            get {
                return this.MaxStepField;
            }
            set {
                if ((this.MaxStepField.Equals(value) != true)) {
                    this.MaxStepField = value;
                    this.RaisePropertyChanged("MaxStep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Team {
            get {
                return this.TeamField;
            }
            set {
                if ((this.TeamField.Equals(value) != true)) {
                    this.TeamField = value;
                    this.RaisePropertyChanged("Team");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReplayDescription", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class ReplayDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IDField;
        
        private string NameField;
        
        private System.Collections.ObjectModel.ObservableCollection<WarSpot.MetroClient.ServiceClient.TeamDescription> TeamsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<WarSpot.MetroClient.ServiceClient.TeamDescription> Teams {
            get {
                return this.TeamsField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamsField, value) != true)) {
                    this.TeamsField = value;
                    this.RaisePropertyChanged("Teams");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamDescription", Namespace="http://schemas.datacontract.org/2004/07/WarSpot.Contracts.Service")]
    public partial class TeamDescription : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Guid IDField;
        
        private System.Collections.ObjectModel.ObservableCollection<System.Guid> IntellectsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<System.Guid> Intellects {
            get {
                return this.IntellectsField;
            }
            set {
                if ((object.ReferenceEquals(this.IntellectsField, value) != true)) {
                    this.IntellectsField = value;
                    this.RaisePropertyChanged("Intellects");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceClient.IWarSpotService")]
    public interface IWarSpotService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/Register", ReplyAction="http://tempuri.org/IWarSpotService/RegisterResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> RegisterAsync(string username, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/Login", ReplyAction="http://tempuri.org/IWarSpotService/LoginResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> LoginAsync(string inputUsername, string inputPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/ChangePassword", ReplyAction="http://tempuri.org/IWarSpotService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> ChangePasswordAsync(string oldpassword, string newpassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/UploadIntellect", ReplyAction="http://tempuri.org/IWarSpotService/UploadIntellectResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> UploadIntellectAsync(byte[] intellect, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/DownloadIntellect", ReplyAction="http://tempuri.org/IWarSpotService/DownloadIntellectResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadIntellectAsync(System.Guid intellectID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/GetListOfIntellects", ReplyAction="http://tempuri.org/IWarSpotService/GetListOfIntellectsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.KeyValuePair<System.Guid, string>>> GetListOfIntellectsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/DeleteIntellect", ReplyAction="http://tempuri.org/IWarSpotService/DeleteIntellectResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> DeleteIntellectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/DownloadReplay", ReplyAction="http://tempuri.org/IWarSpotService/DownloadReplayResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.Replay> DownloadReplayAsync(System.Guid game);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/GetListOfReplays", ReplyAction="http://tempuri.org/IWarSpotService/GetListOfReplaysResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WarSpot.MetroClient.ServiceClient.ReplayDescription>> GetListOfReplaysAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/BeginMatch", ReplyAction="http://tempuri.org/IWarSpotService/BeginMatchResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.Guid>> BeginMatchAsync(System.Collections.ObjectModel.ObservableCollection<System.Guid> intellects, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/GetListOfGames", ReplyAction="http://tempuri.org/IWarSpotService/GetListOfGamesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Guid>> GetListOfGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/IsUserAdmin", ReplyAction="http://tempuri.org/IWarSpotService/IsUserAdminResponse")]
        System.Threading.Tasks.Task<bool> IsUserAdminAsync(System.Guid user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/IsUser", ReplyAction="http://tempuri.org/IWarSpotService/IsUserResponse")]
        System.Threading.Tasks.Task<bool> IsUserAsync(string role, System.Guid user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/SetUserRole", ReplyAction="http://tempuri.org/IWarSpotService/SetUserRoleResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> SetUserRoleAsync(System.Guid user, string role, string until);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/GetUserRoles", ReplyAction="http://tempuri.org/IWarSpotService/GetUserRolesResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetUserRolesAsync(System.Guid user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/CreateTournament", ReplyAction="http://tempuri.org/IWarSpotService/CreateTournamentResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> CreateTournamentAsync(string title, string startdate, long maxplayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/GetMyTournamets", ReplyAction="http://tempuri.org/IWarSpotService/GetMyTournametsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Guid>> GetMyTournametsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/DeleteTournament", ReplyAction="http://tempuri.org/IWarSpotService/DeleteTournamentResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> DeleteTournamentAsync(System.Guid tournamentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/GetAvailableTournaments", ReplyAction="http://tempuri.org/IWarSpotService/GetAvailableTournamentsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Guid>> GetAvailableTournamentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/JoinTournament", ReplyAction="http://tempuri.org/IWarSpotService/JoinTournamentResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> JoinTournamentAsync(System.Guid tournamentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/LeaveTournament", ReplyAction="http://tempuri.org/IWarSpotService/LeaveTournamentResponse")]
        System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> LeaveTournamentAsync(System.Guid tournamentID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWarSpotService/KeepAlive", ReplyAction="http://tempuri.org/IWarSpotService/KeepAliveResponse")]
        System.Threading.Tasks.Task KeepAliveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWarSpotServiceChannel : WarSpot.MetroClient.ServiceClient.IWarSpotService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WarSpotServiceClient : System.ServiceModel.ClientBase<WarSpot.MetroClient.ServiceClient.IWarSpotService>, WarSpot.MetroClient.ServiceClient.IWarSpotService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WarSpotServiceClient() : 
                base(WarSpotServiceClient.GetDefaultBinding(), WarSpotServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IWarSpotService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WarSpotServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(WarSpotServiceClient.GetBindingForEndpoint(endpointConfiguration), WarSpotServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WarSpotServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(WarSpotServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WarSpotServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(WarSpotServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WarSpotServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> RegisterAsync(string username, string pass) {
            return base.Channel.RegisterAsync(username, pass);
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> LoginAsync(string inputUsername, string inputPass) {
            return base.Channel.LoginAsync(inputUsername, inputPass);
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> ChangePasswordAsync(string oldpassword, string newpassword) {
            return base.Channel.ChangePasswordAsync(oldpassword, newpassword);
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> UploadIntellectAsync(byte[] intellect, string name) {
            return base.Channel.UploadIntellectAsync(intellect, name);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadIntellectAsync(System.Guid intellectID) {
            return base.Channel.DownloadIntellectAsync(intellectID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Collections.Generic.KeyValuePair<System.Guid, string>>> GetListOfIntellectsAsync() {
            return base.Channel.GetListOfIntellectsAsync();
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> DeleteIntellectAsync(string name) {
            return base.Channel.DeleteIntellectAsync(name);
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.Replay> DownloadReplayAsync(System.Guid game) {
            return base.Channel.DownloadReplayAsync(game);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<WarSpot.MetroClient.ServiceClient.ReplayDescription>> GetListOfReplaysAsync() {
            return base.Channel.GetListOfReplaysAsync();
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.Guid>> BeginMatchAsync(System.Collections.ObjectModel.ObservableCollection<System.Guid> intellects, string title) {
            return base.Channel.BeginMatchAsync(intellects, title);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Guid>> GetListOfGamesAsync() {
            return base.Channel.GetListOfGamesAsync();
        }
        
        public System.Threading.Tasks.Task<bool> IsUserAdminAsync(System.Guid user) {
            return base.Channel.IsUserAdminAsync(user);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserAsync(string role, System.Guid user) {
            return base.Channel.IsUserAsync(role, user);
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> SetUserRoleAsync(System.Guid user, string role, string until) {
            return base.Channel.SetUserRoleAsync(user, role, until);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<string>> GetUserRolesAsync(System.Guid user) {
            return base.Channel.GetUserRolesAsync(user);
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> CreateTournamentAsync(string title, string startdate, long maxplayers) {
            return base.Channel.CreateTournamentAsync(title, startdate, maxplayers);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Guid>> GetMyTournametsAsync() {
            return base.Channel.GetMyTournametsAsync();
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> DeleteTournamentAsync(System.Guid tournamentID) {
            return base.Channel.DeleteTournamentAsync(tournamentID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<System.Guid>> GetAvailableTournamentsAsync() {
            return base.Channel.GetAvailableTournamentsAsync();
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> JoinTournamentAsync(System.Guid tournamentID) {
            return base.Channel.JoinTournamentAsync(tournamentID);
        }
        
        public System.Threading.Tasks.Task<WarSpot.MetroClient.ServiceClient.ErrorCode> LeaveTournamentAsync(System.Guid tournamentID) {
            return base.Channel.LeaveTournamentAsync(tournamentID);
        }
        
        public System.Threading.Tasks.Task KeepAliveAsync() {
            return base.Channel.KeepAliveAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IWarSpotService)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IWarSpotService)) {
                return new System.ServiceModel.EndpointAddress("net.tcp://127.255.0.1:8000/WarSpotMainUserService");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return WarSpotServiceClient.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IWarSpotService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return WarSpotServiceClient.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IWarSpotService);
        }
        
        public enum EndpointConfiguration {
            
            NetTcpBinding_IWarSpotService,
        }
    }
}
