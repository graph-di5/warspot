//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("DBModel", "AccountIntellect", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Account), "Intellect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Intellect), true)]
[assembly: EdmRelationshipAttribute("DBModel", "AccountGame", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Account), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Game), true)]
[assembly: EdmRelationshipAttribute("DBModel", "AccountUserRole", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Account), "UserRole", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.UserRole), true)]
[assembly: EdmRelationshipAttribute("DBModel", "AccountTournament", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Account), "Tournament", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Tournament), true)]
[assembly: EdmRelationshipAttribute("DBModel", "AccountTournament1", "Account", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Account), "Tournament", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Tournament))]
[assembly: EdmRelationshipAttribute("DBModel", "TeamGame", "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Team), "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Game), true)]
[assembly: EdmRelationshipAttribute("DBModel", "IntellectTeam", "Intellect", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Intellect), "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(WarSpot.Cloud.Storage.Team))]
[assembly: EdmRelationshipAttribute("DBModel", "GameGameDetails", "Game", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Game), "GameDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(WarSpot.Cloud.Storage.GameDetails), true)]
[assembly: EdmRelationshipAttribute("DBModel", "TeamGameDetails", "Team", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(WarSpot.Cloud.Storage.Team), "GameDetails", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(WarSpot.Cloud.Storage.GameDetails))]

#endregion

namespace WarSpot.Cloud.Storage
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class DBContext : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект DBContext, используя строку соединения из раздела "DBContext" файла конфигурации приложения.
        /// </summary>
        public DBContext() : base("name=DBContext", "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта DBContext.
        /// </summary>
        public DBContext(string connectionString) : base(connectionString, "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта DBContext.
        /// </summary>
        public DBContext(EntityConnection connection) : base(connection, "DBContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Account> Account
        {
            get
            {
                if ((_Account == null))
                {
                    _Account = base.CreateObjectSet<Account>("Account");
                }
                return _Account;
            }
        }
        private ObjectSet<Account> _Account;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Intellect> Intellect
        {
            get
            {
                if ((_Intellect == null))
                {
                    _Intellect = base.CreateObjectSet<Intellect>("Intellect");
                }
                return _Intellect;
            }
        }
        private ObjectSet<Intellect> _Intellect;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Game> Game
        {
            get
            {
                if ((_Game == null))
                {
                    _Game = base.CreateObjectSet<Game>("Game");
                }
                return _Game;
            }
        }
        private ObjectSet<Game> _Game;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<UserRole> UserRole
        {
            get
            {
                if ((_UserRole == null))
                {
                    _UserRole = base.CreateObjectSet<UserRole>("UserRole");
                }
                return _UserRole;
            }
        }
        private ObjectSet<UserRole> _UserRole;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Tournament> Tournament
        {
            get
            {
                if ((_Tournament == null))
                {
                    _Tournament = base.CreateObjectSet<Tournament>("Tournament");
                }
                return _Tournament;
            }
        }
        private ObjectSet<Tournament> _Tournament;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Security> Securities
        {
            get
            {
                if ((_Securities == null))
                {
                    _Securities = base.CreateObjectSet<Security>("Securities");
                }
                return _Securities;
            }
        }
        private ObjectSet<Security> _Securities;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<File> Files
        {
            get
            {
                if ((_Files == null))
                {
                    _Files = base.CreateObjectSet<File>("Files");
                }
                return _Files;
            }
        }
        private ObjectSet<File> _Files;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<GameDetails> GameDetails
        {
            get
            {
                if ((_GameDetails == null))
                {
                    _GameDetails = base.CreateObjectSet<GameDetails>("GameDetails");
                }
                return _GameDetails;
            }
        }
        private ObjectSet<GameDetails> _GameDetails;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Team> Teams
        {
            get
            {
                if ((_Teams == null))
                {
                    _Teams = base.CreateObjectSet<Team>("Teams");
                }
                return _Teams;
            }
        }
        private ObjectSet<Team> _Teams;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Account. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAccount(Account account)
        {
            base.AddObject("Account", account);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Intellect. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToIntellect(Intellect intellect)
        {
            base.AddObject("Intellect", intellect);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Game. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToGame(Game game)
        {
            base.AddObject("Game", game);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet UserRole. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUserRole(UserRole userRole)
        {
            base.AddObject("UserRole", userRole);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Tournament. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTournament(Tournament tournament)
        {
            base.AddObject("Tournament", tournament);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Securities. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSecurities(Security security)
        {
            base.AddObject("Securities", security);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Files. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToFiles(File file)
        {
            base.AddObject("Files", file);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet GameDetails. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToGameDetails(GameDetails gameDetails)
        {
            base.AddObject("GameDetails", gameDetails);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Teams. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTeams(Team team)
        {
            base.AddObject("Teams", team);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Account")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Account : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Account.
        /// </summary>
        /// <param name="account_ID">Исходное значение свойства Account_ID.</param>
        /// <param name="account_Name">Исходное значение свойства Account_Name.</param>
        /// <param name="account_Password">Исходное значение свойства Account_Password.</param>
        public static Account CreateAccount(global::System.Guid account_ID, global::System.String account_Name, global::System.String account_Password)
        {
            Account account = new Account();
            account.Account_ID = account_ID;
            account.Account_Name = account_Name;
            account.Account_Password = account_Password;
            return account;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Account_ID
        {
            get
            {
                return _Account_ID;
            }
            set
            {
                if (_Account_ID != value)
                {
                    OnAccount_IDChanging(value);
                    ReportPropertyChanging("Account_ID");
                    _Account_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Account_ID");
                    OnAccount_IDChanged();
                }
            }
        }
        private global::System.Guid _Account_ID;
        partial void OnAccount_IDChanging(global::System.Guid value);
        partial void OnAccount_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Account_Name
        {
            get
            {
                return _Account_Name;
            }
            set
            {
                OnAccount_NameChanging(value);
                ReportPropertyChanging("Account_Name");
                _Account_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Account_Name");
                OnAccount_NameChanged();
            }
        }
        private global::System.String _Account_Name;
        partial void OnAccount_NameChanging(global::System.String value);
        partial void OnAccount_NameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Account_Password
        {
            get
            {
                return _Account_Password;
            }
            set
            {
                OnAccount_PasswordChanging(value);
                ReportPropertyChanging("Account_Password");
                _Account_Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Account_Password");
                OnAccount_PasswordChanged();
            }
        }
        private global::System.String _Account_Password;
        partial void OnAccount_PasswordChanging(global::System.String value);
        partial void OnAccount_PasswordChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountIntellect", "Intellect")]
        public EntityCollection<Intellect> Intellect
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Intellect>("DBModel.AccountIntellect", "Intellect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Intellect>("DBModel.AccountIntellect", "Intellect", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountGame", "Game")]
        public EntityCollection<Game> Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Game>("DBModel.AccountGame", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Game>("DBModel.AccountGame", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountUserRole", "UserRole")]
        public EntityCollection<UserRole> UserRole
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRole>("DBModel.AccountUserRole", "UserRole");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRole>("DBModel.AccountUserRole", "UserRole", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountTournament", "Tournament")]
        public EntityCollection<Tournament> TournamentCreator
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tournament>("DBModel.AccountTournament", "Tournament");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tournament>("DBModel.AccountTournament", "Tournament", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountTournament1", "Tournament")]
        public EntityCollection<Tournament> TournamentPlayer
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tournament>("DBModel.AccountTournament1", "Tournament");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tournament>("DBModel.AccountTournament1", "Tournament", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="File")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class File : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта File.
        /// </summary>
        /// <param name="file_Id">Исходное значение свойства File_Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="creationTime">Исходное значение свойства CreationTime.</param>
        /// <param name="description">Исходное значение свойства Description.</param>
        /// <param name="longComment">Исходное значение свойства LongComment.</param>
        public static File CreateFile(global::System.Guid file_Id, global::System.String name, global::System.DateTime creationTime, global::System.String description, global::System.String longComment)
        {
            File file = new File();
            file.File_Id = file_Id;
            file.Name = name;
            file.CreationTime = creationTime;
            file.Description = description;
            file.LongComment = longComment;
            return file;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid File_Id
        {
            get
            {
                return _File_Id;
            }
            set
            {
                if (_File_Id != value)
                {
                    OnFile_IdChanging(value);
                    ReportPropertyChanging("File_Id");
                    _File_Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("File_Id");
                    OnFile_IdChanged();
                }
            }
        }
        private global::System.Guid _File_Id;
        partial void OnFile_IdChanging(global::System.Guid value);
        partial void OnFile_IdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreationTime
        {
            get
            {
                return _CreationTime;
            }
            set
            {
                OnCreationTimeChanging(value);
                ReportPropertyChanging("CreationTime");
                _CreationTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreationTime");
                OnCreationTimeChanged();
            }
        }
        private global::System.DateTime _CreationTime;
        partial void OnCreationTimeChanging(global::System.DateTime value);
        partial void OnCreationTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LongComment
        {
            get
            {
                return _LongComment;
            }
            set
            {
                OnLongCommentChanging(value);
                ReportPropertyChanging("LongComment");
                _LongComment = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LongComment");
                OnLongCommentChanged();
            }
        }
        private global::System.String _LongComment;
        partial void OnLongCommentChanging(global::System.String value);
        partial void OnLongCommentChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Game")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Game : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Game.
        /// </summary>
        /// <param name="game_ID">Исходное значение свойства Game_ID.</param>
        /// <param name="creator_ID">Исходное значение свойства Creator_ID.</param>
        /// <param name="creationTime">Исходное значение свойства CreationTime.</param>
        /// <param name="game_Name">Исходное значение свойства Game_Name.</param>
        public static Game CreateGame(global::System.Guid game_ID, global::System.Guid creator_ID, global::System.String creationTime, global::System.String game_Name)
        {
            Game game = new Game();
            game.Game_ID = game_ID;
            game.Creator_ID = creator_ID;
            game.CreationTime = creationTime;
            game.Game_Name = game_Name;
            return game;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Game_ID
        {
            get
            {
                return _Game_ID;
            }
            set
            {
                if (_Game_ID != value)
                {
                    OnGame_IDChanging(value);
                    ReportPropertyChanging("Game_ID");
                    _Game_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Game_ID");
                    OnGame_IDChanged();
                }
            }
        }
        private global::System.Guid _Game_ID;
        partial void OnGame_IDChanging(global::System.Guid value);
        partial void OnGame_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Creator_ID
        {
            get
            {
                return _Creator_ID;
            }
            set
            {
                OnCreator_IDChanging(value);
                ReportPropertyChanging("Creator_ID");
                _Creator_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Creator_ID");
                OnCreator_IDChanged();
            }
        }
        private global::System.Guid _Creator_ID;
        partial void OnCreator_IDChanging(global::System.Guid value);
        partial void OnCreator_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Replay
        {
            get
            {
                return _Replay;
            }
            set
            {
                OnReplayChanging(value);
                ReportPropertyChanging("Replay");
                _Replay = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Replay");
                OnReplayChanged();
            }
        }
        private global::System.String _Replay;
        partial void OnReplayChanging(global::System.String value);
        partial void OnReplayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CreationTime
        {
            get
            {
                return _CreationTime;
            }
            set
            {
                OnCreationTimeChanging(value);
                ReportPropertyChanging("CreationTime");
                _CreationTime = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CreationTime");
                OnCreationTimeChanged();
            }
        }
        private global::System.String _CreationTime;
        partial void OnCreationTimeChanging(global::System.String value);
        partial void OnCreationTimeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Game_Name
        {
            get
            {
                return _Game_Name;
            }
            set
            {
                OnGame_NameChanging(value);
                ReportPropertyChanging("Game_Name");
                _Game_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Game_Name");
                OnGame_NameChanged();
            }
        }
        private global::System.String _Game_Name;
        partial void OnGame_NameChanging(global::System.String value);
        partial void OnGame_NameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountGame", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountGame", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountGame", "Account").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountGame", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DBModel.AccountGame", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "TeamGame", "Team")]
        public EntityCollection<Team> Teams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Team>("DBModel.TeamGame", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Team>("DBModel.TeamGame", "Team", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "GameGameDetails", "GameDetails")]
        public GameDetails GameDetail
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GameDetails>("DBModel.GameGameDetails", "GameDetails").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GameDetails>("DBModel.GameGameDetails", "GameDetails").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GameDetails> GameDetailReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GameDetails>("DBModel.GameGameDetails", "GameDetails");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GameDetails>("DBModel.GameGameDetails", "GameDetails", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="GameDetails")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GameDetails : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GameDetails.
        /// </summary>
        /// <param name="gameDetails_ID">Исходное значение свойства GameDetails_ID.</param>
        /// <param name="stepsCount">Исходное значение свойства StepsCount.</param>
        /// <param name="winner_ID">Исходное значение свойства Winner_ID.</param>
        public static GameDetails CreateGameDetails(global::System.Guid gameDetails_ID, global::System.Int32 stepsCount, global::System.Guid winner_ID)
        {
            GameDetails gameDetails = new GameDetails();
            gameDetails.GameDetails_ID = gameDetails_ID;
            gameDetails.StepsCount = stepsCount;
            gameDetails.Winner_ID = winner_ID;
            return gameDetails;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GameDetails_ID
        {
            get
            {
                return _GameDetails_ID;
            }
            set
            {
                if (_GameDetails_ID != value)
                {
                    OnGameDetails_IDChanging(value);
                    ReportPropertyChanging("GameDetails_ID");
                    _GameDetails_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GameDetails_ID");
                    OnGameDetails_IDChanged();
                }
            }
        }
        private global::System.Guid _GameDetails_ID;
        partial void OnGameDetails_IDChanging(global::System.Guid value);
        partial void OnGameDetails_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StepsCount
        {
            get
            {
                return _StepsCount;
            }
            set
            {
                OnStepsCountChanging(value);
                ReportPropertyChanging("StepsCount");
                _StepsCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StepsCount");
                OnStepsCountChanged();
            }
        }
        private global::System.Int32 _StepsCount;
        partial void OnStepsCountChanging(global::System.Int32 value);
        partial void OnStepsCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Winner_ID
        {
            get
            {
                return _Winner_ID;
            }
            set
            {
                OnWinner_IDChanging(value);
                ReportPropertyChanging("Winner_ID");
                _Winner_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Winner_ID");
                OnWinner_IDChanged();
            }
        }
        private global::System.Guid _Winner_ID;
        partial void OnWinner_IDChanging(global::System.Guid value);
        partial void OnWinner_IDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "GameGameDetails", "Game")]
        public Game Game
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.GameGameDetails", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.GameGameDetails", "Game").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GameReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.GameGameDetails", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("DBModel.GameGameDetails", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "TeamGameDetails", "Team")]
        public Team Team
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("DBModel.TeamGameDetails", "Team").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("DBModel.TeamGameDetails", "Team").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Team> TeamReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Team>("DBModel.TeamGameDetails", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Team>("DBModel.TeamGameDetails", "Team", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Intellect")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Intellect : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Intellect.
        /// </summary>
        /// <param name="intellect_ID">Исходное значение свойства Intellect_ID.</param>
        /// <param name="intellect_Name">Исходное значение свойства Intellect_Name.</param>
        /// <param name="accountAccount_ID">Исходное значение свойства AccountAccount_ID.</param>
        public static Intellect CreateIntellect(global::System.Guid intellect_ID, global::System.String intellect_Name, global::System.Guid accountAccount_ID)
        {
            Intellect intellect = new Intellect();
            intellect.Intellect_ID = intellect_ID;
            intellect.Intellect_Name = intellect_Name;
            intellect.AccountAccount_ID = accountAccount_ID;
            return intellect;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Intellect_ID
        {
            get
            {
                return _Intellect_ID;
            }
            set
            {
                if (_Intellect_ID != value)
                {
                    OnIntellect_IDChanging(value);
                    ReportPropertyChanging("Intellect_ID");
                    _Intellect_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Intellect_ID");
                    OnIntellect_IDChanged();
                }
            }
        }
        private global::System.Guid _Intellect_ID;
        partial void OnIntellect_IDChanging(global::System.Guid value);
        partial void OnIntellect_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Intellect_Name
        {
            get
            {
                return _Intellect_Name;
            }
            set
            {
                OnIntellect_NameChanging(value);
                ReportPropertyChanging("Intellect_Name");
                _Intellect_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Intellect_Name");
                OnIntellect_NameChanged();
            }
        }
        private global::System.String _Intellect_Name;
        partial void OnIntellect_NameChanging(global::System.String value);
        partial void OnIntellect_NameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AccountAccount_ID
        {
            get
            {
                return _AccountAccount_ID;
            }
            set
            {
                OnAccountAccount_IDChanging(value);
                ReportPropertyChanging("AccountAccount_ID");
                _AccountAccount_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountAccount_ID");
                OnAccountAccount_IDChanged();
            }
        }
        private global::System.Guid _AccountAccount_ID;
        partial void OnAccountAccount_IDChanging(global::System.Guid value);
        partial void OnAccountAccount_IDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountIntellect", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountIntellect", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DBModel.AccountIntellect", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "IntellectTeam", "Team")]
        public EntityCollection<Team> Teams
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Team>("DBModel.IntellectTeam", "Team");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Team>("DBModel.IntellectTeam", "Team", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Security")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Security : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Security.
        /// </summary>
        /// <param name="illegalReferenceName">Исходное значение свойства IllegalReferenceName.</param>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static Security CreateSecurity(global::System.String illegalReferenceName, global::System.Guid id)
        {
            Security security = new Security();
            security.IllegalReferenceName = illegalReferenceName;
            security.Id = id;
            return security;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IllegalReferenceName
        {
            get
            {
                return _IllegalReferenceName;
            }
            set
            {
                OnIllegalReferenceNameChanging(value);
                ReportPropertyChanging("IllegalReferenceName");
                _IllegalReferenceName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IllegalReferenceName");
                OnIllegalReferenceNameChanged();
            }
        }
        private global::System.String _IllegalReferenceName;
        partial void OnIllegalReferenceNameChanging(global::System.String value);
        partial void OnIllegalReferenceNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Team")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Team : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Team.
        /// </summary>
        /// <param name="team_ID">Исходное значение свойства Team_ID.</param>
        /// <param name="gameGame_ID">Исходное значение свойства GameGame_ID.</param>
        public static Team CreateTeam(global::System.Guid team_ID, global::System.Guid gameGame_ID)
        {
            Team team = new Team();
            team.Team_ID = team_ID;
            team.GameGame_ID = gameGame_ID;
            return team;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Team_ID
        {
            get
            {
                return _Team_ID;
            }
            set
            {
                if (_Team_ID != value)
                {
                    OnTeam_IDChanging(value);
                    ReportPropertyChanging("Team_ID");
                    _Team_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Team_ID");
                    OnTeam_IDChanged();
                }
            }
        }
        private global::System.Guid _Team_ID;
        partial void OnTeam_IDChanging(global::System.Guid value);
        partial void OnTeam_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid GameGame_ID
        {
            get
            {
                return _GameGame_ID;
            }
            set
            {
                OnGameGame_IDChanging(value);
                ReportPropertyChanging("GameGame_ID");
                _GameGame_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GameGame_ID");
                OnGameGame_IDChanged();
            }
        }
        private global::System.Guid _GameGame_ID;
        partial void OnGameGame_IDChanging(global::System.Guid value);
        partial void OnGameGame_IDChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "TeamGame", "Game")]
        public Game Games
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.TeamGame", "Game").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.TeamGame", "Game").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Game> GamesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Game>("DBModel.TeamGame", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Game>("DBModel.TeamGame", "Game", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "IntellectTeam", "Intellect")]
        public EntityCollection<Intellect> Intellects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Intellect>("DBModel.IntellectTeam", "Intellect");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Intellect>("DBModel.IntellectTeam", "Intellect", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="Tournament")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Tournament : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Tournament.
        /// </summary>
        /// <param name="tournament_ID">Исходное значение свойства Tournament_ID.</param>
        /// <param name="maxPlayers">Исходное значение свойства MaxPlayers.</param>
        /// <param name="when">Исходное значение свойства When.</param>
        /// <param name="creator_ID">Исходное значение свойства Creator_ID.</param>
        /// <param name="tournament_Name">Исходное значение свойства Tournament_Name.</param>
        public static Tournament CreateTournament(global::System.Guid tournament_ID, global::System.Int64 maxPlayers, global::System.String when, global::System.Guid creator_ID, global::System.String tournament_Name)
        {
            Tournament tournament = new Tournament();
            tournament.Tournament_ID = tournament_ID;
            tournament.MaxPlayers = maxPlayers;
            tournament.When = when;
            tournament.Creator_ID = creator_ID;
            tournament.Tournament_Name = tournament_Name;
            return tournament;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Tournament_ID
        {
            get
            {
                return _Tournament_ID;
            }
            set
            {
                if (_Tournament_ID != value)
                {
                    OnTournament_IDChanging(value);
                    ReportPropertyChanging("Tournament_ID");
                    _Tournament_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Tournament_ID");
                    OnTournament_IDChanged();
                }
            }
        }
        private global::System.Guid _Tournament_ID;
        partial void OnTournament_IDChanging(global::System.Guid value);
        partial void OnTournament_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 MaxPlayers
        {
            get
            {
                return _MaxPlayers;
            }
            set
            {
                OnMaxPlayersChanging(value);
                ReportPropertyChanging("MaxPlayers");
                _MaxPlayers = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaxPlayers");
                OnMaxPlayersChanged();
            }
        }
        private global::System.Int64 _MaxPlayers;
        partial void OnMaxPlayersChanging(global::System.Int64 value);
        partial void OnMaxPlayersChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String When
        {
            get
            {
                return _When;
            }
            set
            {
                OnWhenChanging(value);
                ReportPropertyChanging("When");
                _When = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("When");
                OnWhenChanged();
            }
        }
        private global::System.String _When;
        partial void OnWhenChanging(global::System.String value);
        partial void OnWhenChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Creator_ID
        {
            get
            {
                return _Creator_ID;
            }
            set
            {
                OnCreator_IDChanging(value);
                ReportPropertyChanging("Creator_ID");
                _Creator_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Creator_ID");
                OnCreator_IDChanged();
            }
        }
        private global::System.Guid _Creator_ID;
        partial void OnCreator_IDChanging(global::System.Guid value);
        partial void OnCreator_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Tournament_Name
        {
            get
            {
                return _Tournament_Name;
            }
            set
            {
                OnTournament_NameChanging(value);
                ReportPropertyChanging("Tournament_Name");
                _Tournament_Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Tournament_Name");
                OnTournament_NameChanged();
            }
        }
        private global::System.String _Tournament_Name;
        partial void OnTournament_NameChanging(global::System.String value);
        partial void OnTournament_NameChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountTournament", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountTournament", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountTournament", "Account").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountTournament", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DBModel.AccountTournament", "Account", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountTournament1", "Account")]
        public EntityCollection<Account> Player
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Account>("DBModel.AccountTournament1", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Account>("DBModel.AccountTournament1", "Account", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="DBModel", Name="UserRole")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserRole : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта UserRole.
        /// </summary>
        /// <param name="role_ID">Исходное значение свойства Role_ID.</param>
        /// <param name="until">Исходное значение свойства Until.</param>
        /// <param name="accountAccount_ID">Исходное значение свойства AccountAccount_ID.</param>
        /// <param name="role_Code">Исходное значение свойства Role_Code.</param>
        public static UserRole CreateUserRole(global::System.Guid role_ID, global::System.String until, global::System.Guid accountAccount_ID, global::System.Int32 role_Code)
        {
            UserRole userRole = new UserRole();
            userRole.Role_ID = role_ID;
            userRole.Until = until;
            userRole.AccountAccount_ID = accountAccount_ID;
            userRole.Role_Code = role_Code;
            return userRole;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Role_ID
        {
            get
            {
                return _Role_ID;
            }
            set
            {
                if (_Role_ID != value)
                {
                    OnRole_IDChanging(value);
                    ReportPropertyChanging("Role_ID");
                    _Role_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Role_ID");
                    OnRole_IDChanged();
                }
            }
        }
        private global::System.Guid _Role_ID;
        partial void OnRole_IDChanging(global::System.Guid value);
        partial void OnRole_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Until
        {
            get
            {
                return _Until;
            }
            set
            {
                OnUntilChanging(value);
                ReportPropertyChanging("Until");
                _Until = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Until");
                OnUntilChanged();
            }
        }
        private global::System.String _Until;
        partial void OnUntilChanging(global::System.String value);
        partial void OnUntilChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid AccountAccount_ID
        {
            get
            {
                return _AccountAccount_ID;
            }
            set
            {
                OnAccountAccount_IDChanging(value);
                ReportPropertyChanging("AccountAccount_ID");
                _AccountAccount_ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AccountAccount_ID");
                OnAccountAccount_IDChanged();
            }
        }
        private global::System.Guid _AccountAccount_ID;
        partial void OnAccountAccount_IDChanging(global::System.Guid value);
        partial void OnAccountAccount_IDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Role_Code
        {
            get
            {
                return _Role_Code;
            }
            set
            {
                OnRole_CodeChanging(value);
                ReportPropertyChanging("Role_Code");
                _Role_Code = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Role_Code");
                OnRole_CodeChanged();
            }
        }
        private global::System.Int32 _Role_Code;
        partial void OnRole_CodeChanging(global::System.Int32 value);
        partial void OnRole_CodeChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("DBModel", "AccountUserRole", "Account")]
        public Account Account
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountUserRole", "Account").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountUserRole", "Account").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Account> AccountReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Account>("DBModel.AccountUserRole", "Account");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Account>("DBModel.AccountUserRole", "Account", value);
                }
            }
        }

        #endregion

    }

    #endregion

    
}
